(ns jiksnu.modules.atom.actions.user-actions-test
  (:require [ciste.config :refer [config]]
            [ciste.core :refer [with-context]]
            [ciste.model :as cm]
            [ciste.sections.default :refer [show-section]]
            [clj-factory.core :refer [factory fseq]]
            [clojure.data.json :as json]
            [clojure.tools.logging :as log]
            [hiccup.core :as h]
            ;; [jiksnu.modules.atom.util :as abdera]
            [jiksnu.actions.domain-actions :as actions.domain]
            [jiksnu.actions.user-actions :as actions.user]
            [jiksnu.db :as db]
            [jiksnu.mock :as mock]
            [jiksnu.factory :as factory]
            [jiksnu.model :as model]
            [jiksnu.model.authentication-mechanism :as model.auth-mechanism]
            [jiksnu.model.domain :as model.domain]
            [jiksnu.namespace :as ns]
            [jiksnu.ops :as ops]
            [jiksnu.test-helper :refer [check context future-context test-environment-fixture]]
            [jiksnu.util :as util]
            [lamina.core :as l]
            [midje.sweet :refer [=> =not=> anything throws contains]])
  (:import jiksnu.model.Domain
           jiksnu.model.User
           ;; org.apache.abdera.model.Person
           ))

(test-environment-fixture

 (context #'actions.user/person->user
   (context "when the user has an acct uri"

     (context "when the domain is discovered"
       (context "when given a Person generated by show-section"
         (db/drop-all!)
         (let [user (mock/a-user-exists)
               person (with-context [:http :atom] (show-section user))]
           (actions.user/person->user person) =>
           (check [response]
             response => (partial instance? User)
             response => (contains (select-keys user #{:username :_id :domain :url :name}))
             )
           )))

     (context "when the domain is not discovered"
       (context "when given a Person generated by show-section"
         (db/drop-all!)
         (let [user (mock/a-user-exists)
               person (with-context [:http :atom] (show-section user))]
           (actions.user/person->user person) =>
           (check [response]
             response => (partial instance? User)
             response => (contains (select-keys user #{:username :_id :domain :url :name}))))))
     )

   (context "when the user has an http uri"
     (context "when the domain is not discovered"
       (context "when given a Person generated by show-section"
         (let [domain-name (fseq :domain)
               uri (str "http://" domain-name "/users/1")
               person (.newAuthor abdera/abdera-factory)]
           (doto person
             (.setUri uri))
           ;; (person->user person) => (partial instance? User)
           (actions.user/person->user person) => (contains {:_id uri
                                                            :domain domain-name
                                                            :username "bob"})
           (provided
             (actions.domain/get-discovered anything nil nil) => .domain.
             (actions.user/get-username anything) => "bob")))))
   )

 )
